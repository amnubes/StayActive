https://stackoverflow.com/questions/5863870/how-should-a-model-be-structured-in-mvc/5864000#5864000

What a model is:
In proper MVC adaptation, the M contains all the domain business logic and the Model Layer is mostly made from three
types of structures:

- Domain Objects:
A domain object is a logical container of purely domain information; it usually represents a logical entity in the
problem domain space. Commonly referred to as business logic. This would be where you define how to validate data before
sending an invoice, or to compute the total cost of an order. At the same time, Domain Objects are completely unaware of
storage - neither from where (SQL database, REST API, text file, etc.) nor even if they get saved or retrieved.

- Data Mappers:
These objects are only responsible for the storage. If you store information in a database, this would be where the SQL
lives. Or maybe you use an XML file to store data, and your Data Mappers are parsing from and to XML files.

- Services:
You can think of them as "higher level Domain Objects", but instead of business logic, Services are responsible for
interaction between Domain Objects and Mappers. These structures end up creating a "public" interface for interacting
with the domain business logic. You can avoid them, but at the penalty of leaking some domain logic into Controllers.
There is a related answer to this subject in the ACL implementation question - it might be useful.



The communication between the model layer and other parts of the MVC triad should happen only through Services.
The clear separation has a few additional benefits:
- it helps to enforce the single responsibility principle (SRP)
- provides additional 'wiggle room' in case the logic changes
- keeps the controller as simple as possible
- gives a clear blueprint, if you ever need an external API